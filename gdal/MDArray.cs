//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace OSGeo.GDAL {

using global::System;
using global::System.Runtime.InteropServices;

public class MDArray : global::System.IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;
  protected object swigParentRef;

  protected static object ThisOwn_true() { return null; }
  protected object ThisOwn_false() { return this; }

  public MDArray(IntPtr cPtr, bool cMemoryOwn, object parent) {
    swigCMemOwn = cMemoryOwn;
    swigParentRef = parent;
    swigCPtr = new HandleRef(this, cPtr);
  }

  public static HandleRef getCPtr(MDArray obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }
  public static HandleRef getCPtrAndDisown(MDArray obj, object parent) {
    if (obj != null)
    {
      obj.swigCMemOwn = false;
      obj.swigParentRef = parent;
      return obj.swigCPtr;
    }
    else
    {
      return new HandleRef(null, IntPtr.Zero);
    }
  }
  public static HandleRef getCPtrAndSetReference(MDArray obj, object parent) {
    if (obj != null)
    {
      obj.swigParentRef = parent;
      return obj.swigCPtr;
    }
    else
    {
      return new HandleRef(null, IntPtr.Zero);
    }
  }

  ~MDArray() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          GdalPINVOKE.delete_MDArray(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public string GetName() {
        /* %typemap(csout) (const char *utf8_path) */
        IntPtr cPtr = GdalPINVOKE.MDArray_GetName(swigCPtr);
        string ret = Gdal.Utf8BytesToString(cPtr);
        
    if (GdalPINVOKE.SWIGPendingException.Pending) throw GdalPINVOKE.SWIGPendingException.Retrieve();
        return ret;
}

  public string GetFullName() {
    string ret = GdalPINVOKE.MDArray_GetFullName(swigCPtr);
    if (GdalPINVOKE.SWIGPendingException.Pending) throw GdalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ulong GetTotalElementsCount() {
    ulong ret = GdalPINVOKE.MDArray_GetTotalElementsCount(swigCPtr);
    if (GdalPINVOKE.SWIGPendingException.Pending) throw GdalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetDimensionCount() {
    uint ret = GdalPINVOKE.MDArray_GetDimensionCount(swigCPtr);
    if (GdalPINVOKE.SWIGPendingException.Pending) throw GdalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ExtendedDataType GetDataType() {
    IntPtr cPtr = GdalPINVOKE.MDArray_GetDataType(swigCPtr);
    ExtendedDataType ret = (cPtr == IntPtr.Zero) ? null : new ExtendedDataType(cPtr, true, ThisOwn_true());
    if (GdalPINVOKE.SWIGPendingException.Pending) throw GdalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string[] GetStructuralInfo() {
        /* %typemap(csout) char**options */
        IntPtr cPtr = GdalPINVOKE.MDArray_GetStructuralInfo(swigCPtr);
        IntPtr objPtr;
        int count = 0;
        if (cPtr != IntPtr.Zero) {
            while (Marshal.ReadIntPtr(cPtr, count*IntPtr.Size) != IntPtr.Zero)
                ++count;
        }
        string[] ret = new string[count];
        if (count > 0) {
	        for(int cx = 0; cx < count; cx++) {
                objPtr = System.Runtime.InteropServices.Marshal.ReadIntPtr(cPtr, cx * System.Runtime.InteropServices.Marshal.SizeOf(typeof(IntPtr)));
                ret[cx]= (objPtr == IntPtr.Zero) ? null : System.Runtime.InteropServices.Marshal.PtrToStringAnsi(objPtr);
            }
        }
        
    if (GdalPINVOKE.SWIGPendingException.Pending) throw GdalPINVOKE.SWIGPendingException.Retrieve();
        return ret;
}

  public Attribute GetAttribute(string name) {
    IntPtr cPtr = GdalPINVOKE.MDArray_GetAttribute(swigCPtr, name);
    Attribute ret = (cPtr == IntPtr.Zero) ? null : new Attribute(cPtr, true, ThisOwn_true());
    if (GdalPINVOKE.SWIGPendingException.Pending) throw GdalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Attribute CreateAttribute(string name, int nDimensions, SWIGTYPE_p_GUIntBig dimensions, ExtendedDataType data_type, string[] options) {
    IntPtr cPtr = GdalPINVOKE.MDArray_CreateAttribute(swigCPtr, name, nDimensions, SWIGTYPE_p_GUIntBig.getCPtr(dimensions), ExtendedDataType.getCPtr(data_type), (options != null)? new GdalPINVOKE.StringListMarshal(options)._ar : null);
    Attribute ret = (cPtr == IntPtr.Zero) ? null : new Attribute(cPtr, true, ThisOwn_true());
    if (GdalPINVOKE.SWIGPendingException.Pending) throw GdalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void GetNoDataValueAsDouble(out double val, out int hasval) {
    GdalPINVOKE.MDArray_GetNoDataValueAsDouble(swigCPtr, out val, out hasval);
    if (GdalPINVOKE.SWIGPendingException.Pending) throw GdalPINVOKE.SWIGPendingException.Retrieve();
  }

  public string GetNoDataValueAsString() {
    string ret = GdalPINVOKE.MDArray_GetNoDataValueAsString(swigCPtr);
    if (GdalPINVOKE.SWIGPendingException.Pending) throw GdalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CPLErr SetNoDataValueDouble(double d) {
    CPLErr ret = (CPLErr)GdalPINVOKE.MDArray_SetNoDataValueDouble(swigCPtr, d);
    if (GdalPINVOKE.SWIGPendingException.Pending) throw GdalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CPLErr SetNoDataValueString(string nodata) {
    CPLErr ret = (CPLErr)GdalPINVOKE.MDArray_SetNoDataValueString(swigCPtr, nodata);
    if (GdalPINVOKE.SWIGPendingException.Pending) throw GdalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CPLErr DeleteNoDataValue() {
    CPLErr ret = (CPLErr)GdalPINVOKE.MDArray_DeleteNoDataValue(swigCPtr);
    if (GdalPINVOKE.SWIGPendingException.Pending) throw GdalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void GetOffset(out double val, out int hasval) {
    GdalPINVOKE.MDArray_GetOffset(swigCPtr, out val, out hasval);
    if (GdalPINVOKE.SWIGPendingException.Pending) throw GdalPINVOKE.SWIGPendingException.Retrieve();
  }

  public DataType GetOffsetStorageType() {
    DataType ret = (DataType)GdalPINVOKE.MDArray_GetOffsetStorageType(swigCPtr);
    if (GdalPINVOKE.SWIGPendingException.Pending) throw GdalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void GetScale(out double val, out int hasval) {
    GdalPINVOKE.MDArray_GetScale(swigCPtr, out val, out hasval);
    if (GdalPINVOKE.SWIGPendingException.Pending) throw GdalPINVOKE.SWIGPendingException.Retrieve();
  }

  public DataType GetScaleStorageType() {
    DataType ret = (DataType)GdalPINVOKE.MDArray_GetScaleStorageType(swigCPtr);
    if (GdalPINVOKE.SWIGPendingException.Pending) throw GdalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CPLErr SetOffset(double val, DataType storageType) {
    CPLErr ret = (CPLErr)GdalPINVOKE.MDArray_SetOffset(swigCPtr, val, (int)storageType);
    if (GdalPINVOKE.SWIGPendingException.Pending) throw GdalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CPLErr SetScale(double val, DataType storageType) {
    CPLErr ret = (CPLErr)GdalPINVOKE.MDArray_SetScale(swigCPtr, val, (int)storageType);
    if (GdalPINVOKE.SWIGPendingException.Pending) throw GdalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public CPLErr SetUnit(string unit) {
    CPLErr ret = (CPLErr)GdalPINVOKE.MDArray_SetUnit(swigCPtr, unit);
    if (GdalPINVOKE.SWIGPendingException.Pending) throw GdalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetUnit() {
    string ret = GdalPINVOKE.MDArray_GetUnit(swigCPtr);
    if (GdalPINVOKE.SWIGPendingException.Pending) throw GdalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MDArray GetView(string viewExpr) {
    IntPtr cPtr = GdalPINVOKE.MDArray_GetView(swigCPtr, viewExpr);
    MDArray ret = (cPtr == IntPtr.Zero) ? null : new MDArray(cPtr, true, ThisOwn_true());
    if (GdalPINVOKE.SWIGPendingException.Pending) throw GdalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MDArray Transpose(int nList, int[] pList) {
    IntPtr cPtr = GdalPINVOKE.MDArray_Transpose(swigCPtr, nList, pList);
    MDArray ret = (cPtr == IntPtr.Zero) ? null : new MDArray(cPtr, true, ThisOwn_true());
    if (GdalPINVOKE.SWIGPendingException.Pending) throw GdalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MDArray GetUnscaled() {
    IntPtr cPtr = GdalPINVOKE.MDArray_GetUnscaled(swigCPtr);
    MDArray ret = (cPtr == IntPtr.Zero) ? null : new MDArray(cPtr, true, ThisOwn_true());
    if (GdalPINVOKE.SWIGPendingException.Pending) throw GdalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public MDArray GetMask(string[] options) {
    IntPtr cPtr = GdalPINVOKE.MDArray_GetMask(swigCPtr, (options != null)? new GdalPINVOKE.StringListMarshal(options)._ar : null);
    MDArray ret = (cPtr == IntPtr.Zero) ? null : new MDArray(cPtr, true, ThisOwn_true());
    if (GdalPINVOKE.SWIGPendingException.Pending) throw GdalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Dataset AsClassicDataset(uint iXDim, uint iYDim) {
    IntPtr cPtr = GdalPINVOKE.MDArray_AsClassicDataset(swigCPtr, iXDim, iYDim);
    Dataset ret = (cPtr == IntPtr.Zero) ? null : new Dataset(cPtr, true, ThisOwn_true());
    if (GdalPINVOKE.SWIGPendingException.Pending) throw GdalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Cache(string[] options) {
    bool ret = GdalPINVOKE.MDArray_Cache(swigCPtr, (options != null)? new GdalPINVOKE.StringListMarshal(options)._ar : null);
    if (GdalPINVOKE.SWIGPendingException.Pending) throw GdalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
